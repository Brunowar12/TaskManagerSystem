name: Django CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.10.0, 3.12.10]

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
          fetch-depth: 1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: pip

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: pip install --upgrade pip && pip install -r requirements.txt

    - name: Set up environment
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY || 'test-secret-key' }}" >> $GITHUB_ENV
        echo DB_NAME=test_db >> $GITHUB_ENV
        echo DB_USER=postgres >> $GITHUB_ENV
        echo DB_PASSWORD=password >> $GITHUB_ENV
        echo DB_HOST=localhost >> $GITHUB_ENV
        echo DB_PORT=5432 >> $GITHUB_ENV

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -U postgres; do sleep 1; done

    - name: Run migrations
      run: python manage.py migrate

    - name: Run tests with coverage
      run: |
        pip install coverage
        coverage run --source='.' manage.py test api.tests
        coverage report -m
        coverage xml
        
    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Collect static files
      if: github.event_name == 'push'
      run: python manage.py collectstatic --noinput
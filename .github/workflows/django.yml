name: Django CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11.7, 3.12.3]

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install pip-tools
      run: python -m pip install --upgrade pip pip-tools

    - name: Check for requirements.in
      run: |
        if [ ! -f requirements.in ]; then
          echo "Creating requirements.in..."
          echo "django>=5.0,<6.0" >> requirements.in
          echo "djangorestframework>=3.12.0,<4.0" >> requirements.in
          echo "psycopg2>=2.9.0" >> requirements.in
          echo "django-filters>=23.2,<24.0" >> requirements.in
          echo "python-decouple>=3.8" >> requirements.in
        fi

    - name: Generate requirements.txt with hashes
      run: pip-compile --generate-hashes requirements.in

    - name: Install dependencies
      run: pip install --require-hashes -r requirements.txt

    - name: Set Environment Variables
      run: |
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 5
        done

    - name: Run Migrations
      run: python manage.py migrate

    - name: Run Tests with Coverage
      run: |
        coverage run --source='.' manage.py test
        coverage report -m
        coverage xml

    - name: Collect Static Files (optional)
      if: github.event_name == 'push'
      run: python manage.py collectstatic --noinput
# Generated by Django 5.1.6 on 2025-04-13 15:22

import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=80, unique=True, validators=[django.core.validators.RegexValidator('^[a-zA-Z0-9_.-]+$', 'The username can contain only letters, numbers, underscores, periods and hyphens')], verbose_name='username')),
                ('age', models.PositiveIntegerField(blank=True, help_text='Age must be between 6 and 100 years', null=True, validators=[django.core.validators.MinValueValidator(6), django.core.validators.MaxValueValidator(100)], verbose_name='age')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('place_of_work', models.CharField(blank=True, max_length=256, validators=[django.core.validators.RegexValidator('^[a-zA-Zа-яА-ЯёЁіІїЇєЄґҐ0-9_. -]+$', 'Text can contain letters (latin/cyrillic), numbers, underscores, dots, dashes, and spaces')], verbose_name='place of work')),
                ('phone_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator('^\\+\\d{7,15}$', "The phone number must start with '+' and contain 7 to 15 digits only after it")], verbose_name='phone number')),
                ('last_login_at', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('last_profile_edit_at', models.DateTimeField(blank=True, null=True, verbose_name='last profile edit')),
                ('last_task_completed_at', models.DateTimeField(blank=True, null=True, verbose_name='last task completed')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
